{"ast":null,"code":"import nextConnect from 'next-connect';\nimport middleware from '../';\nimport { ObjectID } from 'mongodb';\nconst handler = nextConnect();\nhandler.use(middleware);\nhandler.get(async (req, res) => {\n  const {\n    date\n  } = req.query;\n  const dataModel = {\n    \"_id\": new ObjectID(),\n    \"date\": date,\n    \"calories\": {\n      \"label\": \"Calories\",\n      \"total\": 0,\n      \"target\": 0,\n      \"variant\": 0\n    },\n    \"carbs\": {\n      \"label\": \"Carbs\",\n      \"total\": 0,\n      \"target\": 0,\n      \"variant\": 0\n    },\n    \"fat\": {\n      \"label\": \"Fat\",\n      \"total\": 0,\n      \"target\": 0,\n      \"variant\": 0\n    },\n    \"protein\": {\n      \"label\": \"Protein\",\n      \"total\": 0,\n      \"target\": 0,\n      \"variant\": 0\n    }\n  };\n  let doc = {};\n\n  if (date) {\n    doc = await req.db.collection('daily').findOne({\n      date: new Date(date)\n    });\n  } else {\n    doc = await req.db.collection('daily').findOne();\n  }\n\n  if (doc == null) {\n    doc = dataModel;\n  }\n\n  res.json(doc);\n});\nhandler.post(async (req, res) => {\n  let data = req.body;\n  data = JSON.parse(data);\n  data.date = new Date(data.date);\n  let doc = await req.db.collection('daily').updateOne({\n    date: new Date(data.date)\n  }, {\n    $set: data\n  }, {\n    upsert: true\n  });\n  res.json({\n    message: 'ok'\n  });\n});\nexport default ((req, res) => handler.apply(req, res));","map":{"version":3,"sources":["/home/paramjeet/Desktop/nextcart/api/categories.jsx"],"names":["nextConnect","middleware","ObjectID","handler","use","get","req","res","date","query","dataModel","doc","db","collection","findOne","Date","json","post","data","body","JSON","parse","updateOne","$set","upsert","message","apply"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,cAAxB;AACA,OAAOC,UAAP,MAAuB,KAAvB;AACA,SAASC,QAAT,QAAyB,SAAzB;AAEA,MAAMC,OAAO,GAAGH,WAAW,EAA3B;AAEAG,OAAO,CAACC,GAAR,CAAYH,UAAZ;AAEAE,OAAO,CAACE,GAAR,CAAY,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAC5B,QAAM;AAAEC,IAAAA;AAAF,MAAWF,GAAG,CAACG,KAArB;AAEA,QAAMC,SAAS,GAAG;AAAE,WAAO,IAAIR,QAAJ,EAAT;AAAyB,YAAQM,IAAjC;AAAuC,gBAAY;AAAE,eAAS,UAAX;AAAuB,eAAS,CAAhC;AAAmC,gBAAU,CAA7C;AAAgD,iBAAW;AAA3D,KAAnD;AAAmH,aAAS;AAAE,eAAS,OAAX;AAAoB,eAAS,CAA7B;AAAgC,gBAAU,CAA1C;AAA6C,iBAAW;AAAxD,KAA5H;AAAyL,WAAO;AAAE,eAAS,KAAX;AAAkB,eAAS,CAA3B;AAA8B,gBAAU,CAAxC;AAA2C,iBAAW;AAAtD,KAAhM;AAA2P,eAAW;AAAE,eAAS,SAAX;AAAsB,eAAS,CAA/B;AAAkC,gBAAU,CAA5C;AAA+C,iBAAW;AAA1D;AAAtQ,GAAlB;AAEA,MAAIG,GAAG,GAAG,EAAV;;AAEA,MAAIH,IAAJ,EAAU;AACNG,IAAAA,GAAG,GAAG,MAAML,GAAG,CAACM,EAAJ,CAAOC,UAAP,CAAkB,OAAlB,EAA2BC,OAA3B,CAAmC;AAAEN,MAAAA,IAAI,EAAE,IAAIO,IAAJ,CAASP,IAAT;AAAR,KAAnC,CAAZ;AACH,GAFD,MAEO;AACHG,IAAAA,GAAG,GAAG,MAAML,GAAG,CAACM,EAAJ,CAAOC,UAAP,CAAkB,OAAlB,EAA2BC,OAA3B,EAAZ;AACH;;AACD,MAAIH,GAAG,IAAI,IAAX,EAAiB;AACbA,IAAAA,GAAG,GAAGD,SAAN;AACH;;AACDH,EAAAA,GAAG,CAACS,IAAJ,CAASL,GAAT;AACH,CAhBD;AAkBAR,OAAO,CAACc,IAAR,CAAa,OAAOX,GAAP,EAAYC,GAAZ,KAAoB;AAC7B,MAAIW,IAAI,GAAGZ,GAAG,CAACa,IAAf;AACAD,EAAAA,IAAI,GAAGE,IAAI,CAACC,KAAL,CAAWH,IAAX,CAAP;AACAA,EAAAA,IAAI,CAACV,IAAL,GAAY,IAAIO,IAAJ,CAASG,IAAI,CAACV,IAAd,CAAZ;AACA,MAAIG,GAAG,GAAG,MAAML,GAAG,CAACM,EAAJ,CAAOC,UAAP,CAAkB,OAAlB,EAA2BS,SAA3B,CAAqC;AAAEd,IAAAA,IAAI,EAAE,IAAIO,IAAJ,CAASG,IAAI,CAACV,IAAd;AAAR,GAArC,EAAoE;AAAEe,IAAAA,IAAI,EAAEL;AAAR,GAApE,EAAoF;AAAEM,IAAAA,MAAM,EAAE;AAAV,GAApF,CAAhB;AAEAjB,EAAAA,GAAG,CAACS,IAAJ,CAAS;AAAES,IAAAA,OAAO,EAAE;AAAX,GAAT;AACH,CAPD;AASA,gBAAe,CAACnB,GAAD,EAAMC,GAAN,KAAcJ,OAAO,CAACuB,KAAR,CAAcpB,GAAd,EAAmBC,GAAnB,CAA7B","sourcesContent":["import nextConnect from 'next-connect';\nimport middleware from '../';\nimport { ObjectID } from 'mongodb';\n\nconst handler = nextConnect();\n\nhandler.use(middleware);\n\nhandler.get(async (req, res) => {\n    const { date } = req.query;\n\n    const dataModel = { \"_id\": new ObjectID(), \"date\": date, \"calories\": { \"label\": \"Calories\", \"total\": 0, \"target\": 0, \"variant\": 0 }, \"carbs\": { \"label\": \"Carbs\", \"total\": 0, \"target\": 0, \"variant\": 0 }, \"fat\": { \"label\": \"Fat\", \"total\": 0, \"target\": 0, \"variant\": 0 }, \"protein\": { \"label\": \"Protein\", \"total\": 0, \"target\": 0, \"variant\": 0 } }\n\n    let doc = {}\n\n    if (date) {\n        doc = await req.db.collection('daily').findOne({ date: new Date(date) })\n    } else {\n        doc = await req.db.collection('daily').findOne()\n    }\n    if (doc == null) {\n        doc = dataModel\n    }\n    res.json(doc)\n});\n\nhandler.post(async (req, res) => {\n    let data = req.body\n    data = JSON.parse(data);\n    data.date = new Date(data.date);\n    let doc = await req.db.collection('daily').updateOne({ date: new Date(data.date) }, { $set: data }, { upsert: true })\n\n    res.json({ message: 'ok' });\n})\n\nexport default (req, res) => handler.apply(req, res) \n"]},"metadata":{},"sourceType":"module"}